"""Lightweight hook / callback system for LOBA Trainer."""

from __future__ import annotations

from typing import Protocol, Any, Dict, runtime_checkable

@runtime_checkable
class Hook(Protocol):
    # epoch-level
    async def on_epoch_start(self, epoch_idx: int, **ctx): ...
    async def on_epoch_end(self, epoch_idx: int, **ctx):   ...

    # batch-level
    async def on_batch_start(self, batch_idx: int, **ctx): ...
    async def on_forward_end(self, outputs: Any, **ctx):   ...
    async def on_loss_computed(self, loss: float, **ctx):  ...
    async def on_backward_end(self, **ctx):               ...
    async def on_step_end(self, **ctx):                   ...
    async def on_optim_step_start(self, **ctx): ...
    async def on_optim_step_end(self, **ctx): ...


class BaseHook:         # no-op async defaults
    async def on_epoch_start(self, epoch_idx: int, **ctx): ...
    async def on_epoch_end(self, epoch_idx: int, **ctx):   ...
    async def on_batch_start(self, batch_idx: int, **ctx): ...
    async def on_forward_end(self, outputs: Any, **ctx):   ...
    async def on_loss_computed(self, loss: float, **ctx):  ...
    async def on_backward_end(self, **ctx):               ...
    async def on_step_end(self, **ctx):                   ...
    async def on_optim_step_start(self, **ctx): ...
    async def on_optim_step_end(self, **ctx): ...
